"use client";

import React, { useState, useMemo } from 'react';
import { type Note } from '@/lib/types';
import { generateNoteContent } from '@/ai/flows/generate-note-content';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { Plus, Sparkles, Share2, Clipboard, Loader2, Tags, X } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface ToolbarProps {
  onAddNote: (content?: string) => void;
  notes: Note[];
  isReadOnly: boolean;
  allTags: string[];
  activeTag: string | null;
  onTagFilterChange: (tag: string | null) => void;
}

export function Toolbar({ onAddNote, notes, isReadOnly, allTags, activeTag, onTagFilterChange }: ToolbarProps) {
  const { toast } = useToast();
  const [isAiDialogOpen, setIsAiDialogOpen] = useState(false);
  const [isShareDialogOpen, setIsShareDialogOpen] = useState(false);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const [aiTopic, setAiTopic] = useState('');

  const shareableLink = useMemo(() => {
    if (typeof window === 'undefined' || notes.length === 0) return '';
    try {
      const serializedState = btoa(JSON.stringify(notes));
      return `${window.location.origin}${window.location.pathname}#${serializedState}`;
    } catch (e) {
      return '';
    }
  }, [notes]);

  const handleGenerateAiContent = async () => {
    if (!aiTopic.trim()) {
      toast({ title: 'Topic is required', description: 'Please enter a topic to generate content.', variant: 'destructive' });
      return;
    }
    setIsAiLoading(true);
    try {
      const result = await generateNoteContent({ topic: aiTopic });
      if (result.content) {
        onAddNote(result.content);
        toast({ title: 'Note created!', description: 'A new note has been generated by AI.' });
        setIsAiDialogOpen(false);
        setAiTopic('');
      }
    } catch (error) {
      console.error('AI generation failed:', error);
      toast({ title: 'Error', description: 'Failed to generate content. Please try again.', variant: 'destructive' });
    } finally {
      setIsAiLoading(false);
    }
  };
  
  const copyToClipboard = () => {
    navigator.clipboard.writeText(shareableLink).then(() => {
      toast({ title: 'Copied to clipboard!', description: 'You can now share your mural.' });
    }).catch(() => {
      toast({ title: 'Error', description: 'Could not copy link to clipboard.', variant: 'destructive' });
    });
  };

  if (isReadOnly) {
    return (
      <div className="fixed bottom-4 left-1/2 -translate-x-1/2 bg-card p-2 rounded-lg shadow-lg border">
        <p className="text-sm text-muted-foreground">Viewing in read-only mode.</p>
      </div>
    );
  }

  return (
    <>
      <div className="fixed bottom-4 left-1/2 -translate-x-1/2 flex items-center gap-2 bg-card p-2 rounded-full shadow-lg border z-50">
        <Button size="icon" onClick={() => onAddNote()} title="Add new note">
          <Plus />
        </Button>
        {/* Bot√£o de IA removido */}
        <div className="flex items-center gap-1">
          <Select value={activeTag || 'all'} onValueChange={(value) => onTagFilterChange(value === 'all' ? null : value)}>
            <SelectTrigger className="w-[150px] rounded-full">
              <Tags className="h-4 w-4 mr-2" />
              <SelectValue placeholder="Filter by tag" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Tags</SelectItem>
              {allTags.map(tag => (
                <SelectItem key={tag} value={tag}>{tag}</SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <Button size="icon" variant="outline" onClick={() => setIsShareDialogOpen(true)} title="Share mural">
          <Share2 />
        </Button>
      </div>
      
      {/* AI Generator Dialog */}
      <Dialog open={isAiDialogOpen} onOpenChange={setIsAiDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Generate Note with AI</DialogTitle>
            <DialogDescription>Enter a topic and let AI create a sticky note for you.</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="topic" className="text-right">Topic</Label>
              <Input id="topic" value={aiTopic} onChange={(e) => setAiTopic(e.target.value)} className="col-span-3" placeholder="e.g., Ideas for a birthday party" />
            </div>
          </div>
          <Button onClick={handleGenerateAiContent} disabled={isAiLoading}>
            {isAiLoading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Sparkles className="mr-2 h-4 w-4" />}
            Generate
          </Button>
        </DialogContent>
      </Dialog>
      
      {/* Share Dialog */}
      <Dialog open={isShareDialogOpen} onOpenChange={setIsShareDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Share Your Mural</DialogTitle>
            <DialogDescription>
              Copy this link to share a read-only version of your current mural.
            </DialogDescription>
          </DialogHeader>
          <div className="flex items-center space-x-2 mt-4">
            <div className="grid flex-1 gap-2">
              <Label htmlFor="link" className="sr-only">Link</Label>
              <Input id="link" defaultValue={shareableLink} readOnly />
            </div>
            <Button type="button" size="icon" onClick={copyToClipboard}>
              <Clipboard className="h-4 w-4" />
              <span className="sr-only">Copy</span>
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
